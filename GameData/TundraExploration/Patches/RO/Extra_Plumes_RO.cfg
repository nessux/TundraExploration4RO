// Applies RO plume rescales to all TE plumes.

@TundraPlume:BEFORE[TundraPlume] {
  @atmosphereKeys {
    @key0 = 0.62   // 6.4km
    @key1 = 0.21   // 15km
    //@key1 = 0.41   // 10km
    // @key2 = 0.09   // 20km
    // @key3 = 0.018  // 30km
    // @key4 = 0.009  // 35km
    // //key4 = 0.029  // 40km
    // //@key5 = 0.001  // 50km
    // @key5 = 0.0003 // 60km

    @key2 = 0.04  // 25km
    @key3 = 0.004  // 40km
    @key4 = 0.001  // 50km
    @key5 = 0.0003 // 60km
  }
  @merlinPowerKeys {
    @startup = 0.0015
    @flameout = 0.002
    @ignition = 0.1
    @deepThrottle = 0.37
    @maxThrottle = 1.0
  }
  @raptorPowerKeys {
    @startup = 0.0015
    @flameout = 0.002
    @ignition = 0.1
    @deepThrottle = 0.37
    @maxThrottle = 1.0
  }
}

@PART[*]:HAS[@TUNDRAPLUME[*]]:AFTER[TundraPlume] { // needs to be executed after all other plume configs
  @EFFECTS {
    // this is the same for all engine modes (MM patches don't support node name wild cards :( )
    @MerlinPlumeAll {
      @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
        @fixedScale *= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      // the part rescale AND the fixed scale field affect the offset, so we need to divide by the rescale factor once to correct for that
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
        @offset /= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
        @offset {
          @power,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
          @density,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
        }
      }
    }
    @MerlinPlumeThree {
      @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
        @fixedScale *= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
        @offset /= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
        @offset {
          @power,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
          @density,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
        }
      }
    }
    @MerlinPlumeOne {
      @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
        @fixedScale *= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
        @offset /= #$../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
        @offset {
          @power,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
          @density,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlume]/totalRescale$
        }
      }
    }
    @MerlinPlumeVac {
      @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
        @fixedScale *= #$../../../TUNDRAPLUME[MerlinPlumeVac]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
        @offset /= #$../../../TUNDRAPLUME[MerlinPlumeVac]/totalRescale$
      }
      @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
        @offset {
          @power,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlumeVac]/totalRescale$
          @density,*[1, ] /= #$../../../../TUNDRAPLUME[MerlinPlumeVac]/totalRescale$
        }
      }
    }

    // @RaptorPlume {
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
    //     @fixedScale *= #$../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //   }
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
    //     @offset /= #$../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //   }
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
    //     @offset {
    //       @power,*[1, ] /= #$../../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //       @density,*[1, ] /= #$../../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //     }
    //   }
    // }
    // @RaptorClusterPlume {
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*],* {
    //     @fixedScale *= #$../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //   }
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[#offset[>0]],* {
    //     @offset /= #$../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //   }
    //   @MODEL_MULTI_SHURIKEN_PERSIST[*]:HAS[@offset],* {
    //     @offset {
    //       @power,*[1, ] /= #$../../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //       @density,*[1, ] /= #$../../../../TUNDRAPLUME[RaptorPlume]/totalRescale$
    //     }
    //   }
    // }
  }
}
